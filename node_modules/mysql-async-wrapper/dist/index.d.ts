/**
 * This is a Wrapper class, which helps to get rid of callbacks of mysql package functions
 * and provides a way to use them in async await (es7) syntax
 *
 * Just Import BaseDatabase class and create a custom class which extends BaseDatabase
 * and pass pool in super (BaseDatabase class constructor)
 *
 * To BeginTransaction Just pass transaction true in options while calling getConnection,
 * or if required beginTransaction function can be called separately
 *
 * Incase of Error in Executing Query and connection is in transaction then it will automatically
 * get rollback
 *
 */
interface IConnectionConfig {
    transaction?: boolean;
}
declare class BaseDatabase {
    private _pool;
    private _connection;
    private _inTransaction;
    constructor(pool: any);
    /**
     * @description To Create Connection
     * @param configuration Config Object, right now supports only transaction key
     * if transaction is passed as true then connection with transaction will be created
     */
    getConnection(configuration?: IConnectionConfig): Promise<{}>;
    beginTransaction(): Promise<{}>;
    /**
     * @description To Execute DB Query, In case of Error and Connecton in transaction auto rollback will be called
     * @param query {required} Query String
     * @param queryParams {optional} Query Array
     */
    executeQuery(query: string, queryParams?: any): Promise<{}>;
    commit(): Promise<{}>;
    rollback(cb?: any): void;
    close(): void;
}
export default BaseDatabase;
